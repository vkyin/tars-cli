// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "command.tars" by Structure Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");

var _hasOwnProperty = Object.prototype.hasOwnProperty;

var Command = Command || {};
module.exports.Command = Command;

Command.BatchCommand = function() {
    this.commands = new TarsStream.List(TarsStream.String);
    this.datas = new TarsStream.List(TarsStream.BinBuffer);
    this._classname = "Command.BatchCommand";
};
Command.BatchCommand._classname = "Command.BatchCommand";
Command.BatchCommand._write = function (os, tag, value) { os.writeStruct(tag, value); };
Command.BatchCommand._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
Command.BatchCommand._readFrom = function (is) {
    var tmp = new Command.BatchCommand;
    tmp.commands = is.readList(0, true, TarsStream.List(TarsStream.String));
    tmp.datas = is.readList(1, true, TarsStream.List(TarsStream.BinBuffer));
    return tmp;
};
Command.BatchCommand.prototype._writeTo = function (os) {
    os.writeList(0, this.commands);
    os.writeList(1, this.datas);
};
Command.BatchCommand.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
Command.BatchCommand.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
Command.BatchCommand.prototype.toObject = function() { 
    return {
        "commands" : this.commands.toObject(),
        "datas" : this.datas.toObject()
    };
};
Command.BatchCommand.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "commands") && (this.commands.readFromObject(json.commands));
    _hasOwnProperty.call(json, "datas") && (this.datas.readFromObject(json.datas));
    return this;
};
Command.BatchCommand.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
Command.BatchCommand.new = function () {
    return new Command.BatchCommand();
};
Command.BatchCommand.create = function (is) {
    return Command.BatchCommand._readFrom(is);
};

Command.TarsDeploy = function() {
    this.serverName = "";
    this.codeZipPkg = new TarsStream.BinBuffer;
    this._classname = "Command.TarsDeploy";
};
Command.TarsDeploy._classname = "Command.TarsDeploy";
Command.TarsDeploy._write = function (os, tag, value) { os.writeStruct(tag, value); };
Command.TarsDeploy._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
Command.TarsDeploy._readFrom = function (is) {
    var tmp = new Command.TarsDeploy;
    tmp.serverName = is.readString(0, true, "");
    tmp.codeZipPkg = is.readBytes(1, true, TarsStream.BinBuffer);
    return tmp;
};
Command.TarsDeploy.prototype._writeTo = function (os) {
    os.writeString(0, this.serverName);
    os.writeBytes(1, this.codeZipPkg);
};
Command.TarsDeploy.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
Command.TarsDeploy.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
Command.TarsDeploy.prototype.toObject = function() { 
    return {
        "serverName" : this.serverName,
        "codeZipPkg" : this.codeZipPkg.toObject()
    };
};
Command.TarsDeploy.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "serverName") && (this.serverName = json.serverName);
    _hasOwnProperty.call(json, "codeZipPkg") && (this.codeZipPkg.readFromObject(json.codeZipPkg));
    return this;
};
Command.TarsDeploy.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
Command.TarsDeploy.new = function () {
    return new Command.TarsDeploy();
};
Command.TarsDeploy.create = function (is) {
    return Command.TarsDeploy._readFrom(is);
};

Command.TarsPatch = function() {
    this.appName = "";
    this.serverName = "";
    this.codeZipPkg = new TarsStream.BinBuffer;
    this._classname = "Command.TarsPatch";
};
Command.TarsPatch._classname = "Command.TarsPatch";
Command.TarsPatch._write = function (os, tag, value) { os.writeStruct(tag, value); };
Command.TarsPatch._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
Command.TarsPatch._readFrom = function (is) {
    var tmp = new Command.TarsPatch;
    tmp.appName = is.readString(0, true, "");
    tmp.serverName = is.readString(1, true, "");
    tmp.codeZipPkg = is.readBytes(2, true, TarsStream.BinBuffer);
    return tmp;
};
Command.TarsPatch.prototype._writeTo = function (os) {
    os.writeString(0, this.appName);
    os.writeString(1, this.serverName);
    os.writeBytes(2, this.codeZipPkg);
};
Command.TarsPatch.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
Command.TarsPatch.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
Command.TarsPatch.prototype.toObject = function() { 
    return {
        "appName" : this.appName,
        "serverName" : this.serverName,
        "codeZipPkg" : this.codeZipPkg.toObject()
    };
};
Command.TarsPatch.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "appName") && (this.appName = json.appName);
    _hasOwnProperty.call(json, "serverName") && (this.serverName = json.serverName);
    _hasOwnProperty.call(json, "codeZipPkg") && (this.codeZipPkg.readFromObject(json.codeZipPkg));
    return this;
};
Command.TarsPatch.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
Command.TarsPatch.new = function () {
    return new Command.TarsPatch();
};
Command.TarsPatch.create = function (is) {
    return Command.TarsPatch._readFrom(is);
};

Command.SaveFile = function() {
    this.fileName = "";
    this.filebuff = new TarsStream.BinBuffer;
    this._classname = "Command.SaveFile";
};
Command.SaveFile._classname = "Command.SaveFile";
Command.SaveFile._write = function (os, tag, value) { os.writeStruct(tag, value); };
Command.SaveFile._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
Command.SaveFile._readFrom = function (is) {
    var tmp = new Command.SaveFile;
    tmp.fileName = is.readString(0, true, "");
    tmp.filebuff = is.readBytes(1, true, TarsStream.BinBuffer);
    return tmp;
};
Command.SaveFile.prototype._writeTo = function (os) {
    os.writeString(0, this.fileName);
    os.writeBytes(1, this.filebuff);
};
Command.SaveFile.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
Command.SaveFile.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
Command.SaveFile.prototype.toObject = function() { 
    return {
        "fileName" : this.fileName,
        "filebuff" : this.filebuff.toObject()
    };
};
Command.SaveFile.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "fileName") && (this.fileName = json.fileName);
    _hasOwnProperty.call(json, "filebuff") && (this.filebuff.readFromObject(json.filebuff));
    return this;
};
Command.SaveFile.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
Command.SaveFile.new = function () {
    return new Command.SaveFile();
};
Command.SaveFile.create = function (is) {
    return Command.SaveFile._readFrom(is);
};

Command.Print = function() {
    this.data = "";
    this._classname = "Command.Print";
};
Command.Print._classname = "Command.Print";
Command.Print._write = function (os, tag, value) { os.writeStruct(tag, value); };
Command.Print._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
Command.Print._readFrom = function (is) {
    var tmp = new Command.Print;
    tmp.data = is.readString(0, true, "");
    return tmp;
};
Command.Print.prototype._writeTo = function (os) {
    os.writeString(0, this.data);
};
Command.Print.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
Command.Print.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
Command.Print.prototype.toObject = function() { 
    return {
        "data" : this.data
    };
};
Command.Print.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "data") && (this.data = json.data);
    return this;
};
Command.Print.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
Command.Print.new = function () {
    return new Command.Print();
};
Command.Print.create = function (is) {
    return Command.Print._readFrom(is);
};


